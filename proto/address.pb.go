// Code generated by protoc-gen-go. DO NOT EDIT.
// source: address.proto

/*
Package address is a generated protocol buffer package.

It is generated from these files:
	address.proto

It has these top-level messages:
	AddressRequest
	AddressReply
*/
package address

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddressRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *AddressRequest) Reset()                    { *m = AddressRequest{} }
func (m *AddressRequest) String() string            { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()               {}
func (*AddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddressRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type AddressReply struct {
	Reply bool `protobuf:"varint,1,opt,name=reply" json:"reply,omitempty"`
}

func (m *AddressReply) Reset()                    { *m = AddressReply{} }
func (m *AddressReply) String() string            { return proto.CompactTextString(m) }
func (*AddressReply) ProtoMessage()               {}
func (*AddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddressReply) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func init() {
	proto.RegisterType((*AddressRequest)(nil), "AddressRequest")
	proto.RegisterType((*AddressReply)(nil), "AddressReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Address service

type AddressClient interface {
	SetIp(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error)
}

type addressClient struct {
	cc *grpc.ClientConn
}

func NewAddressClient(cc *grpc.ClientConn) AddressClient {
	return &addressClient{cc}
}

func (c *addressClient) SetIp(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressReply, error) {
	out := new(AddressReply)
	err := grpc.Invoke(ctx, "/Address/setIp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Address service

type AddressServer interface {
	SetIp(context.Context, *AddressRequest) (*AddressReply, error)
}

func RegisterAddressServer(s *grpc.Server, srv AddressServer) {
	s.RegisterService(&_Address_serviceDesc, srv)
}

func _Address_SetIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServer).SetIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Address/SetIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServer).SetIp(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Address_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Address",
	HandlerType: (*AddressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setIp",
			Handler:    _Address_SetIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address.proto",
}

func init() { proto.RegisterFile("address.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4c, 0x49, 0x29,
	0x4a, 0x2d, 0x2e, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x52, 0xe0, 0xe2, 0x73, 0x84, 0x08,
	0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71, 0x31, 0x65, 0x16, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0x31, 0x65, 0x16, 0x28, 0xa9, 0x70, 0xf1, 0xc0, 0x55, 0x14, 0xe4, 0x54,
	0x0a, 0x89, 0x70, 0xb1, 0x16, 0x81, 0x18, 0x60, 0x25, 0x1c, 0x41, 0x10, 0x8e, 0x91, 0x09, 0x17,
	0x3b, 0x54, 0x95, 0x90, 0x26, 0x17, 0x6b, 0x71, 0x6a, 0x89, 0x67, 0x81, 0x10, 0xbf, 0x1e, 0xaa,
	0xd1, 0x52, 0xbc, 0x7a, 0xc8, 0x26, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x1d, 0x61, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x7d, 0x1d, 0x5f, 0x1e, 0x95, 0x00, 0x00, 0x00,
}
